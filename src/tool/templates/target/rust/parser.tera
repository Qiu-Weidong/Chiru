use std::{collections::HashMap, rc::Rc};

use crate::{runtime::{token::Token, ast::{rule_context::RuleContext, terminal_context::TerminalContext, ast_context::ASTContext}, vocabulary::Vocabulary}, tool::{grammar::{Production, ProductionItem}, syntaxis::syntaxis_context::{RuleListContext, ParserRuleContext, BlockContext, AlternativeContext, EpsilonContext, ElementContext, EbnfSuffixContext, LexerRuleContext, RegularContext}}};



pub struct SyntaxisParser {
  pub tokens: Vec<Token>,

  // 这两个应该声明为常量
  pub table: HashMap<(usize, usize), Rc<Production>>,
  pub vocabulary: Vocabulary,
}


impl SyntaxisParser {

  // 使用模板生成
  {% for rule in rules %}
  pub const {{rule.upcase}}: usize = {{rule.rule_index}};{% endfor %}




  pub fn new(tokens: Vec<Token>, table: HashMap<(usize, usize), Rc<Production>>, vocabulary: Vocabulary) -> Self {

    Self {
      tokens,
      table,
      vocabulary,
    }
  }


  // 使用模板生成
  {% for rule in rules %}
  pub fn {{rule.underscore}}(&self) -> Box<dyn {{ rule.pascal }}Context> {
    let mut cursor = 0;
    let result = self.parse_ast(&mut cursor, Self::{{rule.upcase}});
    Box::new(result)
  }
  {% endfor %}



  // 直接照抄
  fn parse_ast(&self, cursor: &mut usize, rule_index: usize) -> RuleContext {
    // let mut cursor = cursor;

    let token_type = self.tokens[*cursor].token_type;
    let production = self.table.get(&(rule_index, token_type)).unwrap();
    let name = self.vocabulary.get_nonterminal_name_with_default(rule_index);

    let mut result = RuleContext { rule_index, rule_name: name, children: Vec::new(), };
    
    for child in production.right.iter() {
      match child {
        ProductionItem::NonTerminal(rule_id) => {
          let rule = self.parse_ast(cursor, *rule_id);
          // cursor = new_cursor;
          if let Some(_) = self.vocabulary.get_nonterminal_name_by_id(*rule_id) {
            let child = ASTContext::Rule(rule);
            result.children.push(child);
          } else {
            for child in rule.children.iter() {
              result.children.push(child.clone());
            }
          }
          
        },
        ProductionItem::Terminal(token_type) => {
          // 检查是否匹配
          if *token_type != self.tokens[*cursor].token_type { println!("符号不匹配") }
          let terminal = TerminalContext { symbol: self.tokens[*cursor].clone() };
          *cursor += 1;
          let child = ASTContext::Terminal(terminal);
          result.children.push(child);
        },
      };
    }
    
    result
  }

}




