
use lazy_static::lazy_static; 

use std::collections::{HashMap, HashSet};
use maplit::hashmap;
use maplit::hashset;
use lazy_static::lazy_static;

use chiru::{
  runtime::{parser::LL1, token_stream::TokenStream, error_strategy::error_listener::ConsoleErrorListener}, 

  tool::grammar::{production::ProductionItem, production::Production}

};

use super::{{ grammar_name.0 }}_context::{
  {% for nonterminal in nonterminals %} {{nonterminal.3}}Context,{% endfor %}
};


pub struct {{grammar_name.2}}Parser {
  pub analyzer: LL1,
}


lazy_static!{
  // 直接写预测分析表
  static ref LL1_TABLE: HashMap<(usize, usize), usize> = hashmap!{
    {% for item in table %}
    ({{item.0}}, {{item.1}}) => {{item.2}},{% endfor %}
  };

  // 产生式
  static ref PRODUCTIONS: HashMap<usize, Production>  = hashmap!{
    {% for production in productions %}
    {{production.0}} => Production::new({{production.0}}, {{production.1}}, &{{production.2}}),{% endfor %}
  };

  // 非终结符
  pub static ref NONTERMINALS: HashMap<usize, &'static str> = hashmap! {
    {% for nonterminal in nonterminals %}
    {{nonterminal.0}} => "{{nonterminal.1}}",{% endfor %}
  };

  // 终结符
  pub static ref TERMINALS: HashMap<usize, &'static str> = hashmap! {
    {% for terminal in terminals %}
    {{terminal.0}} => "{{terminal.1}}",{% endfor %}
  };

  pub static ref SYNC: HashSet<(usize, usize)> = hashset! {
    {% for sync in sync_list %}
    ({{sync.0}}, {{sync.1}}),{% endfor %}
  };
}

#[allow(unused)]
impl {{grammar_name.2}}Parser {

  // 使用模板生成 每个非终结符的编号
  {% for nonterminal in nonterminals %}
  pub const {{nonterminal.2}}: usize = {{nonterminal.0}}; {% endfor %}



  pub fn new() -> Self {
    Self {
      analyzer: LL1 { 
        error_listeners: vec![Box::new(ConsoleErrorListener::new()),], 
        table: &LL1_TABLE, 
        productions: &PRODUCTIONS, 
        rule_names: &NONTERMINALS, 
        sync: &SYNC, 
      }
    }
  }


  // 使用模板生成
  {% for nonterminal in nonterminals %}
  pub fn {{nonterminal.1}}(&self, token_stream: &mut TokenStream) -> Box<dyn {{nonterminal.3}}Context> {
    let result = self.analyzer.analyse(token_stream, Self::{{nonterminal.2}});
    Box::new(result)
  } {% endfor %}

}






// impl Parser for SyntaxisParser {}

