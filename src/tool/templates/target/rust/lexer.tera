{#
  传入的参数和类型
  grammar_file_name: String       语法文件名,如 Chiru.chiru
  chiru_version: String           生成该文件所使用的 chiru 版本,如 0.7.0
  package_name: Option<NameCase>  包名, 可能为空
  grammar_name: NameCase          语法名称
#}

{# 先 include 一个 header #}
{% include "header" ignore missing %}

use chiru::once_cell::sync::Lazy;
use chiru::regex::Regex;

use chiru::runtime::error_strategy::error_listener::{ErrorListener, ConsoleErrorListener};
use chiru::runtime::lexer::TokenIter;
use chiru::runtime::lexer::Lexer;
use chiru::runtime::lexer_rule::LexerRule;

pub struct {{ grammar_name.pascal_case }}Lexer<'a> {
  pub input: &'a str, 

  pub error_listeners: Vec<Box<dyn ErrorListener>>,
}


static LEXER_RULE_LIST: Lazy<Vec<LexerRule>> = Lazy::new(|| {
  vec![
    {% for lexer_rule in lexer_rule_list %}
    LexerRule { 
      rule: Regex::new({{ lexer_rule.regex }}).unwrap(),  
      token_type: {{lexer_rule.token_type}}, 
      channel: {{lexer_rule.channel}}, 
      token_name: String::from("{{ lexer_rule.token_name }}"), 
      skip: {{lexer_rule.skip}},
    }, {% endfor %}
  ]
});



#[allow(unused)]
impl<'a> {{ grammar_name.pascal_case }}Lexer<'a> {
  pub const _START: usize = 0;
  pub const _STOP: usize = 1;

  // 从这里开始使用模板
  {% for lexer_rule in lexer_rule_list %}
  pub const {{ lexer_rule.screaming_snake_case }}: usize = {{ lexer_rule.token_type }};{% endfor %}


  pub fn new(input: &'a str) -> Self {
    Self { 
      input, 
      error_listeners: vec![Box::new(ConsoleErrorListener::new())],
    }
  }

  // 考虑是否放入 trait 中
  pub fn remove_all_error_listeners(&mut self) {
    self.error_listeners.clear()
  }

  pub fn add_error_listener(&mut self, listener: Box<dyn ErrorListener>) {
    self.error_listeners.push(listener)
  }



}


impl Lexer for {{grammar_name.pascal_case}}Lexer<'_> {
  fn iter(&self) -> TokenIter {
    TokenIter::new(self.input, &LEXER_RULE_LIST, &self.error_listeners)
  }
}


